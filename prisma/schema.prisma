generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("VERCEL_DATABASE_URL")
}

model User {
  id               String          @id
  name             String
  email            String          @unique
  password         String          @default("")
  role             Role
  schoolId         String
  resetToken       String?
  resetTokenExpiry DateTime?
  tempPassword     String?
  Parent           Parent?
  RefreshTokens    RefreshTokens[]
  Staff            Staff?
  Student          Student?
  school           School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model RefreshTokens {
  id         String   @id @default(uuid())
  userId     String
  tokenHash  String   @unique
  deviceInfo String   @default("")
  ipAddress  String   @default("")
  createdAt  DateTime @default(now())
  expiresOn  DateTime
  lastUsed   DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Staff {
  id              String   @id
  name            String
  image           String   @default("")
  email           String   @unique
  oracleNo        String
  registrationNo  String
  designation     String
  post            String
  payrollNo       String
  level           String
  yearOfService   Int
  teaching        Boolean
  address         String
  phoneNo         String
  yearOfExit      Int
  schoolId        String
  admin           Boolean  @default(false)
  classesTeaching String[] @default([])
  subjectsTaught  String[] @default([])
  User            User     @relation(fields: [id], references: [id], onDelete: Cascade)
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Parent {
  id       String    @id
  email    String    @unique
  name     String
  phoneNo  String
  address  String
  schoolId String
  User     User      @relation(fields: [id], references: [id], onDelete: Cascade)
  school   School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  Student  Student[]
}

model Student {
  id             String       @id
  name           String
  image          String       @default("")
  email          String       @unique
  parentId       String
  parentNo       String
  parentName     String
  registrationNo String
  admissionNo    String
  birthdate      String
  gender         Gender
  DOA            String
  class          String
  address        String
  schoolId       String
  Attendance     Attendance[]
  feesPayments   FeesPayment[]
  User           User         @relation(fields: [id], references: [id], onDelete: Cascade)
  parent         Parent       @relation(fields: [parentId], references: [id])
  school         School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  ExamResults   ExamResult[]
}

model School {
  id                  String         @id @default(uuid())
  name                String
  address             String
  primaryColor        String         @default("")
  primaryColorLight   String         @default("")
  secondaryColor      String         @default("")
  secondaryColorLight String         @default("")
  accentColor1        String         @default("")
  accentColor1Light   String         @default("")
  accentColor2        String         @default("")
  accentColor2Light   String         @default("")
  accentColor3        String         @default("")
  accentColor3Light   String         @default("")
  logo                String
  missionStatement    String         @default("")
  visionStatement     String         @default("")
  principal           String
  vicePrincipal       String
  slogan              String
  type                SchoolType
  startHour           String
  closeHour           String
  timetableHtml       String
  admins              String[]
  announcements       Announcement[]
  attendances         Attendance[]
  classes             Class[]
  events              Event[]
  parents             Parent[]
  staffs              Staff[]
  students            Student[]
  subjects            Subject[]
  timetables          Timetable[]
  users               User[]

  exams         Exam[]
}

model FeesPayment {
  id         Int      @id @default(autoincrement())
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String
  amount     Float
  paidAt     DateTime @default(now())
  term       String
  status     String   // "Paid", "Pending", "Overdue"
  paymentMethod String
  schoolId   String
}

model Subject {
  id       String   @id @default(uuid())
  name     String
  teachers String[] @default([])
  schoolId String
  school   School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  results     ExamResult[]
}

model Class {
  id           String       @id @default(uuid())
  name         String
  totalStudent Int          @default(0)
  classTeacher String
  schoolId     String
  Attendance   Attendance[]
  school       School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Timetable {
  id         String @id @default(uuid())
  day        String
  startTime  String
  endTime    String
  class      String
  subject    String
  period     Int
  periodSpan Int
  schoolId   String
  school     School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Attendance {
  id        String         @id @default(uuid())
  date      DateTime
  schoolId  String
  studentId String
  classId   String
  status    AttendanceType
  class     Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  school    School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  student   Student        @relation(fields: [studentId], references: [id])
}

model ClassTermFee {
  id        Int      @id @default(autoincrement())
  className String   // e.g., "Grade 1", "Grade 2"
  term      String   // e.g., "Term 1", "Term 2"
  totalFee  Float
  createdAt DateTime @default(now())

  @@unique([className, term]) // ensures no duplicate fee for same class and term
}

model Exam {
  id          String       @id @default(uuid())
  name        String       // e.g. "Mid Term 1", "End of Term 2"
  term        String       // e.g. "Term 1"
  year        Int
  startDate   DateTime
  endDate     DateTime
  schoolId    String
  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  results     ExamResult[]
}

model ExamResult {
  id          String     @id @default(uuid())
  studentId   String
  subjectId   String
  examId      String
  score       Float
  grade       String
  remarks     String      @default("")
  createdAt   DateTime    @default(now())

  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject     Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  exam        Exam        @relation(fields: [examId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  startTime   String
  endTime     String
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  NONTEACHING
}

enum SchoolType {
  PRIMARY
  JUNIOR
  SENIOR
}

enum Gender {
  MALE
  FEMALE
}

enum AttendanceType {
  PRESENT
  ABSENT
}
